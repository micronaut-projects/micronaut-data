name: GraalVM CI
on:
  workflow_call:
    inputs:
      graalvm:
        description: 'graalvm version passed from the caller workflow'
        required: true
        type: string
      java:
        description: 'java version passed from the caller workflow'
        required: true
        type: string
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USERNAME }}
      GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
      GH_TOKEN_PUBLIC_REPOS_READONLY: ${{ secrets.GH_TOKEN_PUBLIC_REPOS_READONLY }}
      GH_USERNAME: ${{ secrets.GH_USERNAME }}
      TESTCONTAINERS_RYUK_DISABLED: true
      PREDICTIVE_TEST_SELECTION: "${{ github.event_name == 'pull_request' && 'true' || 'false' }}"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      # https://github.com/actions/virtual-environments/issues/709
      - name: "üóë Free disk space"
        run: |
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          df -h

      - name: "üì• Checkout repository"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "üîß Setup GraalVM CE"
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ inputs.graalvm }}
          java-version: ${{ inputs.java }}
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "üîß Setup Gradle"
        uses: gradle/gradle-build-action@v2

      - name: "‚ùì Optional setup step"
        run: |
          [ -f ./setup.sh ] && ./setup.sh || [ ! -f ./setup.sh ]

      - name: "üõ† Build with Gradle"
        id: gradle
        run: |
          if ./gradlew tasks --no-daemon --all | grep -w "nativeTest"
          then
            ./gradlew nativeTest --no-daemon --continue
          fi

      - name: "üìä Publish Test Report"
        if: always()
        uses: mikepenz/action-junit-report@v3
        with:
          check_name: Java CI / Test Report (${{ inputs.java }})
          report_paths: '**/build/test-results/test/TEST-*.xml'
          check_retries: 'true'

      - name: "üìú Upload binary compatibility check results"
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: binary-compatibility-reports
          path: "**/build/reports/binary-compatibility-*.html"

