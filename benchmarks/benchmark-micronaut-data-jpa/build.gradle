plugins {
    id "application"
    id "java"
    id "me.champeau.jmh" version "0.6.4"
}

version "0.1"
group "example"


configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}
configurations {
    all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                //specifying a fixed version for all libraries with 'org.gradle' group
                if (details.requested.group == 'org.springframework') {
                    details.useVersion '5.2.0.RELEASE'
                }
                if (details.requested.group == 'org.hibernate') {
                    details.useVersion '5.4.4.Final'
                }
            }
        }
    }

}
dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")

    annotationProcessor project(":data-processor")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation project(":data-hibernate-jpa")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.sql:micronaut-jdbc-hikari:$micronautSqlVersion"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    runtimeOnly "com.h2database:h2"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5:$micronautTestVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    jmh "org.openjdk.jmh:jmh-core:$jmhVersion"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
}

test.classpath += configurations.developmentOnly

mainClassName = "example.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
jmh {
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
}
