import java.time.Duration

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "io.micronaut.build.internal:micronaut-gradle-plugins:4.1.5"
    }
}

subprojects { Project subproject ->
    group "io.micronaut.data"

    boolean isExampleOrBenchmark = subproject.parent.name == "docs-examples" || subproject.name.contains("example") || subproject.name.contains("benchmark")
    ext {
        skipDocumentation = true
    }
    if (subproject.name != 'data-bom' && !isExampleOrBenchmark) {
        if (subproject.name != 'data-tck') {
            skipDocumentation = false
        }
        apply plugin: "io.micronaut.build.internal.common"
        apply plugin: "io.micronaut.build.internal.dependency-updates"
        apply plugin: "io.micronaut.build.internal.publishing"

        repositories {
            mavenCentral()
        }

        micronautBuild {
            resolutionStrategy {
                force "jakarta.transaction:jakarta.transaction-api:$jakartaTxVersion"
            }
        }

        tasks.withType(JavaCompile) {
            options.encoding = "UTF-8"
            options.compilerArgs.addAll([
                    '-parameters',
                    // enables incremental compilation
                    '-Amicronaut.processing.incremental=true',
                    '-Amicronaut.processing.annotations=io.micronaut.data.*,io.micronaut.core.annotation.*,javax.persistence.*',
                    "-Amicronaut.processing.group=$project.group",
                    "-Amicronaut.processing.module=$project.name",
            ])
        }

    } else if (isExampleOrBenchmark) {
        repositories {
            mavenCentral()
        }
        apply plugin:'java'
        if (subproject.path.contains("groovy") && JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_16)) {
            test.enabled(false)
        }
    } else {
        apply plugin: "java-platform"
        version projectVersion
        apply plugin: "io.micronaut.build.internal.dependency-updates"
        apply plugin: "io.micronaut.build.internal.publishing"

        repositories {
            mavenCentral()
        }
    }

    tasks.withType(Test) {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_15)) {
            jvmArgs "--enable-preview"
        }
        timeout = Duration.ofHours(1)
    }

    if (subproject.name != 'data-bom') {
        dependencies {
            implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
            testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
            annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
            testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")

            testImplementation platform("org.testcontainers:testcontainers-bom:$testContainersVersion")
            testImplementation "io.micronaut.test:micronaut-test-spock"
        }

        configurations {
            all {
                resolutionStrategy.force "org.hibernate:hibernate-core:$hibernateVersion"
                resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                    if (details.requested.name == 'groovy-all') {
                        throw new GradleException("Dependency 'groovy-all' not allowed!")
                    }
                    if (groovyVersion && details.requested.group == 'org.codehaus.groovy') {
                        details.useVersion groovyVersion
                    }
                    if (micronautSqlVersion && details.requested.group == 'io.micronaut.sql') {
                        details.useVersion micronautSqlVersion
                    }
                    if (spockVersion && details.requested.group == 'org.spockframework') {
                        details.useVersion spockVersion
                    }
                }
                if (micronautTestVersion) {
                    resolutionStrategy.force "io.micronaut.test:micronaut-test-spock:$micronautTestVersion"
                }
            }
        }

        tasks.withType(Test) {
            jvmArgs '-Xmx2048m'
            systemProperty "micronaut.cloud.platform", "OTHER"
            if (JavaVersion.current() == JavaVersion.VERSION_15) {
                jvmArgs "--enable-preview"
            }
            timeout = Duration.ofHours(1)
        }
    }
    
}

apply plugin: "io.micronaut.build.internal.docs"
apply plugin: "io.micronaut.build.internal.dependency-updates"
