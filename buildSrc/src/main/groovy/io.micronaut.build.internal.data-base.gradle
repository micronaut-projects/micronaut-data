import org.gradle.api.services.BuildService
import org.gradle.api.services.BuildServiceParameters

import java.time.Duration

plugins {
    id "java-library"
    id "io.micronaut.build.internal.data-dependencies"
}

group "io.micronaut.data"
version projectVersion

java {
    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
            '-parameters',
            // enables incremental compilation
            '-Amicronaut.processing.incremental=true',
            '-Amicronaut.processing.annotations=io.micronaut.data.*,io.micronaut.core.annotation.*,javax.persistence.*,jakarta.persistence.*',
            "-Amicronaut.processing.group=$project.group",
            "-Amicronaut.processing.module=$project.name",
    ])
}

def testSemaphore = gradle.sharedServices.registerIfAbsent("testSemaphore", TestSemaphore) {
    def concurrentTests = micronautBuild.environment.githubAction.map { isCi -> isCi ? 1 : Math.max(1, Runtime.runtime.availableProcessors().intdiv(2i)) }
    maxParallelUsages = providers.gradleProperty("max.concurrent.tests").map(Integer::parseInt).orElse(concurrentTests).get()
    println("Allowing ${concurrentTests.get()} concurrent tests")
}

tasks.withType(Test).configureEach {
    usesService(testSemaphore)
    jvmArgs '-Xmx1024m'
    systemProperty "micronaut.cloud.platform", "OTHER"
    if (JavaVersion.current() == JavaVersion.VERSION_15) {
        jvmArgs "--enable-preview"
    }
    timeout = Duration.ofHours(1)
    doFirst {
        testSemaphore.get()
    }
    if (micronautBuild.environment.githubAction.get()) {
        plugins.withId("io.micronaut.test-resources") {
            finalizedBy("stopTestResourcesService")
        }
    }
}

abstract class TestSemaphore implements BuildService<BuildServiceParameters.None> {
}
