import io.micronaut.testresources.buildtools.KnownModules

plugins {
    id "io.micronaut.build.internal.data-module"
    id "io.micronaut.test-resources"
}

dependencies {
    annotationProcessor mn.micronaut.inject.java
    annotationProcessor mn.micronaut.graal

    api projects.micronautDataRuntime
    api projects.micronautDataModel
    api projects.micronautDataTxHibernate
    api projects.micronautDataJpa
    api mnSql.hibernate.core

    implementation (mnSql.micronaut.hibernate.jpa) {
        exclude group:'org.javassist', module:'javassist'
        exclude group: 'io.micronaut.data'
    }

    testAnnotationProcessor mn.micronaut.inject.java
    testAnnotationProcessor mnValidation.micronaut.validation.processor

    testAnnotationProcessor projects.micronautDataProcessor
    testImplementation mnValidation.micronaut.validation
    testImplementation mnValidation.micronaut.validation.processor

    testImplementation mn.micronaut.inject.groovy
    testImplementation projects.micronautDataProcessor
    testImplementation mnRxjava2.micronaut.rxjava2
    testImplementation mnReactor.micronaut.reactor
    testImplementation projects.micronautDataTck
    testImplementation libs.groovy.sql

    testRuntimeOnly mnSql.h2
    testRuntimeOnly mnSql.postgresql
    testRuntimeOnly mnSql.micronaut.jdbc.tomcat

    testImplementation(libs.jupiter.api)
    testRuntimeOnly(libs.jupiter.engine)
    testImplementation(mnTest.micronaut.test.junit5)
    testImplementation(platform(libs.testcontainers.bom))
    testImplementation(libs.testcontainers)
    testImplementation(libs.testcontainers.junit.jupiter)
    testImplementation(libs.testcontainers.postgresql)
}

micronaut {
    version libs.versions.micronaut.platform.get()
    testResources {
        enabled = true
        inferClasspath = false
        additionalModules.add(KnownModules.JDBC_POSTGRESQL)
        clientTimeout = 300
        version = libs.versions.micronaut.testresources.get()
    }
}
