import io.micronaut.testresources.buildtools.KnownModules

plugins {
    id "io.micronaut.build.internal.data-module"
    id 'io.micronaut.test-resources'
}

dependencies {
    annotationProcessor mn.micronaut.inject.java
    annotationProcessor mn.micronaut.graal
    annotationProcessor libs.micronaut.docs

    api projects.dataRuntime

    implementation mn.micronaut.http
    implementation mn.micronaut.sql.jdbc

    compileOnly libs.micronaut.rxjava2
    compileOnly projects.dataHibernateJpa
    compileOnly libs.drivers.jdbc.oracle

    testAnnotationProcessor mn.micronaut.inject.java
    testAnnotationProcessor projects.dataProcessor

    testImplementation projects.dataTck
    testImplementation projects.dataProcessor
    testImplementation libs.micronaut.rxjava2
    testImplementation libs.micronaut.reactor
    testImplementation libs.jackson.databind
    testImplementation libs.javax.persistence.api
    testImplementation libs.jakarta.persistence.api
    testImplementation libs.groovy.sql
    testImplementation mn.micronaut.validation

    testCompileOnly mn.micronaut.inject.groovy

    testImplementation mn.micronaut.multitenancy
    testImplementation mn.micronaut.http.netty
    testRuntimeOnly libs.micronaut.sql.jdbc.tomcat
    testRuntimeOnly libs.h2
    testRuntimeOnly libs.drivers.jdbc.mariadb
    testRuntimeOnly libs.drivers.jdbc.oracle
    testRuntimeOnly libs.drivers.jdbc.mysql
    testRuntimeOnly libs.drivers.jdbc.postgresql
    testRuntimeOnly libs.drivers.jdbc.mssql

    testResourcesService libs.drivers.jdbc.mariadb
    testResourcesService libs.drivers.jdbc.oracle
    testResourcesService libs.drivers.jdbc.mysql
    testResourcesService libs.drivers.jdbc.postgresql
    testResourcesService libs.drivers.jdbc.mssql

    testImplementation("io.micronaut.testresources:micronaut-test-resources-client")
}

micronaut {
    version = libs.versions.micronaut.asProvider().get()
    testResources {
        enabled = true
        inferClasspath = false
        additionalModules.add(KnownModules.JDBC_POSTGRESQL)
        additionalModules.add(KnownModules.JDBC_MYSQL)
        additionalModules.add(KnownModules.JDBC_MARIADB)
        additionalModules.add(KnownModules.JDBC_ORACLE_XE)
        additionalModules.add(KnownModules.JDBC_MSSQL)
        clientTimeout = 300
    }
}

tasks.named("test") {
    systemProperty "oracle.jdbc.timezoneAsRegion", "false"
    // Disable MySql hanging tests on GraalVM
    if (System.getProperty("java.vendor").toLowerCase().contains("graal")) {
        exclude "**/jdbc/mysql/**"
    }
}

micronautBuild {
    resolutionStrategy {
        componentSelection {
            all { selection ->
                if (selection.candidate.module == 'mssql-jdbc' && !selection.candidate.version.contains("jre8")) {
                    selection.reject("Not a JDK8 compatible MS SQL driver")
                }
            }
        }
    }
}
