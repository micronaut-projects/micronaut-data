import io.micronaut.testresources.buildtools.KnownModules

plugins {
    id "io.micronaut.build.internal.data-module"
    id 'io.micronaut.test-resources'
}

dependencies {
    annotationProcessor mn.micronaut.inject.java
    annotationProcessor mn.micronaut.graal
    annotationProcessor libs.micronaut.docs

    api projects.dataRuntime

    implementation mn.micronaut.json.core
    compileOnly mnSerde.micronaut.serde.oracle.jdbc.json
    implementation mnSql.micronaut.jdbc

    compileOnly mnRxjava2.micronaut.rxjava2
    compileOnly projects.dataHibernateJpa
    compileOnly libs.drivers.jdbc.oracle

    testAnnotationProcessor mn.micronaut.inject.java
    testAnnotationProcessor projects.dataProcessor
    testAnnotationProcessor mnValidation.micronaut.validation.processor

    testImplementation projects.dataTck
    testImplementation projects.dataProcessor
    testImplementation mnRxjava2.micronaut.rxjava2
    testImplementation mnReactor.micronaut.reactor
    testImplementation libs.jackson.databind
    testImplementation libs.javax.persistence.api
    testImplementation libs.jakarta.persistence.api
    testImplementation libs.groovy.sql
    testImplementation mnValidation.micronaut.validation
    testImplementation mnValidation.micronaut.validation.processor

    testImplementation platform(libs.testcontainers.bom)
    testImplementation libs.testcontainers.spock
    testImplementation libs.testcontainers.mysql
    testImplementation libs.testcontainers.mariadb
    testImplementation libs.testcontainers.postgresql
    testImplementation libs.testcontainers.mssqlserver
    testImplementation libs.testcontainers.oracle

    testCompileOnly mn.micronaut.inject.groovy

    testImplementation mnMultitenancy.micronaut.multitenancy

    testImplementation mn.micronaut.http.netty
    testRuntimeOnly mnSql.micronaut.jdbc.tomcat
    testRuntimeOnly mnSql.h2
    testRuntimeOnly libs.drivers.jdbc.mariadb
    testRuntimeOnly libs.drivers.jdbc.oracle
    testRuntimeOnly libs.drivers.jdbc.mysql
    testRuntimeOnly libs.drivers.jdbc.postgresql
    testRuntimeOnly libs.drivers.jdbc.mssql
    testRuntimeOnly mn.snakeyaml

    testResourcesService libs.drivers.jdbc.mariadb
    testResourcesService libs.drivers.jdbc.oracle
    testResourcesService libs.drivers.jdbc.mysql
    testResourcesService libs.drivers.jdbc.postgresql
    testResourcesService libs.drivers.jdbc.mssql

    testImplementation libs.micronaut.testresources.client

    // Needed for H2EagerContextSpec
    testImplementation("org.jetbrains.kotlin:kotlin-reflect:1.8.10")
    testImplementation mnSerde.micronaut.serde.support
}

micronaut {
    version = projectVersion
    testResources {
        enabled = true
        inferClasspath = false
        additionalModules.add(KnownModules.JDBC_POSTGRESQL)
        additionalModules.add(KnownModules.JDBC_MYSQL)
        additionalModules.add(KnownModules.JDBC_MARIADB)
        additionalModules.add(KnownModules.JDBC_ORACLE_XE)
        additionalModules.add(KnownModules.JDBC_MSSQL)
        clientTimeout = 300
        version = libs.versions.micronaut.testresources.get()
    }
}

tasks.withType(Test).configureEach {
    jvmArgs '-Xmx1024m'
    systemProperty "oracle.jdbc.timezoneAsRegion", "false"

    if (micronautBuild.environment.githubAction.get()) {
        // Let some of the checks tests first so the test containers don't eat all the memory
        mustRunAfter ":data-processor:test"
        mustRunAfter ":data-document-processor:test"
        mustRunAfter ":data-hibernate-jpa:test"
        mustRunAfter ":data-hibernate-reactive:test"
        mustRunAfter ":data-mongodb:test"
        mustRunAfter ":data-azure-cosmos:test"
    }
}

micronautBuild {
    resolutionStrategy {
        componentSelection {
            all { selection ->
                if (selection.candidate.module == 'mssql-jdbc' && !selection.candidate.version.contains("jre8")) {
                    selection.reject("Not a JDK8 compatible MS SQL driver")
                }
            }
        }
    }
}
