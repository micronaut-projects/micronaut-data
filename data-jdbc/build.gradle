import io.micronaut.testresources.buildtools.KnownModules

plugins {
    id "io.micronaut.build.internal.data-module"
    id 'io.micronaut.test-resources'
}

dependencies {
    annotationProcessor mn.micronaut.inject.java
    annotationProcessor mn.micronaut.graal
    annotationProcessor libs.micronaut.docs

    api projects.dataRuntime
    api projects.dataTxJdbc

    implementation mn.micronaut.json.core
    compileOnly mnSerde.micronaut.serde.oracle.jdbc.json
    implementation mnSql.micronaut.jdbc

    compileOnly mnRxjava2.micronaut.rxjava2
    compileOnly projects.dataHibernateJpa
    compileOnly libs.drivers.jdbc.oracle

    testAnnotationProcessor mn.micronaut.inject.java
    testAnnotationProcessor projects.dataProcessor
    testAnnotationProcessor mnValidation.micronaut.validation.processor

    testImplementation projects.dataTck
    testImplementation projects.dataProcessor
    testImplementation mnRxjava2.micronaut.rxjava2
    testImplementation mnReactor.micronaut.reactor
    testImplementation libs.jackson.databind
    testImplementation libs.javax.persistence.api
    testImplementation libs.jakarta.persistence.api
    testImplementation libs.groovy.sql
    testImplementation mnValidation.micronaut.validation
    testImplementation mnValidation.micronaut.validation.processor

    testImplementation platform(libs.testcontainers.bom)
    testImplementation libs.testcontainers.spock
    testImplementation libs.testcontainers.mysql
    testImplementation libs.testcontainers.mariadb
    testImplementation libs.testcontainers.postgresql
    testImplementation libs.testcontainers.mssqlserver
    testImplementation libs.testcontainers.oracle

    testCompileOnly mn.micronaut.inject.groovy

    testImplementation mnMultitenancy.micronaut.multitenancy

    testImplementation mn.micronaut.http.netty
    testRuntimeOnly mnSql.micronaut.jdbc.tomcat
    testRuntimeOnly mnSql.h2
    testRuntimeOnly mnSql.mariadb.java.client
    testRuntimeOnly libs.drivers.jdbc.oracle
    testRuntimeOnly mnSql.mysql.connector.java
    testRuntimeOnly mnSql.postgresql
    testRuntimeOnly mnSql.mssql.jdbc
    testRuntimeOnly mn.snakeyaml

    testResourcesService mnSql.mariadb.java.client
    testResourcesService libs.drivers.jdbc.oracle
    testResourcesService mnSql.mysql.connector.java
    testResourcesService mnSql.postgresql
    testResourcesService mnSql.mssql.jdbc

    // Needed for H2EagerContextSpec
    testImplementation("org.jetbrains.kotlin:kotlin-reflect:1.8.21")
    testImplementation mnSerde.micronaut.serde.support

    testImplementation mnTestResources.micronaut.test.resources.extensions.junit.platform

    testRuntimeOnly mnSerde.micronaut.serde.oracle.jdbc.json

    testRuntimeOnly libs.micronaut.flyway
    testRuntimeOnly libs.flyway.oracle
}

micronaut {
    version libs.versions.micronaut.platform.get()
    testResources {
        enabled = true
        inferClasspath = false
        additionalModules.add(KnownModules.JDBC_POSTGRESQL)
        additionalModules.add(KnownModules.JDBC_MYSQL)
        additionalModules.add(KnownModules.JDBC_MARIADB)
        additionalModules.add(KnownModules.JDBC_ORACLE_XE)
        additionalModules.add(KnownModules.JDBC_MSSQL)
        clientTimeout = 300
        version = libs.versions.micronaut.testresources.get()
    }
}

tasks.withType(Test).configureEach {
    jvmArgs '-Xmx1024m'
    systemProperty "oracle.jdbc.timezoneAsRegion", "false"

    if (micronautBuild.environment.githubAction.get()) {
        // Let some of the checks tests first so the test containers don't eat all the memory
        mustRunAfter ":data-processor:test"
        mustRunAfter ":data-document-processor:test"
        mustRunAfter ":data-hibernate-jpa:test"
        mustRunAfter ":data-hibernate-reactive:test"
        mustRunAfter ":data-mongodb:test"
        mustRunAfter ":data-azure-cosmos:test"
    }
}

tasks.named("internalStartTestResourcesService") {
    //debugServer = true
}

micronautBuild {
    resolutionStrategy {
        componentSelection {
            all { selection ->
                if (selection.candidate.module == 'mssql-jdbc' && !selection.candidate.version.contains("jre8")) {
                    selection.reject("Not a JDK8 compatible MS SQL driver")
                }
            }
        }
    }
}
