import io.micronaut.testresources.buildtools.KnownModules

plugins {
    id "io.micronaut.build.internal.data-module"
    id 'io.micronaut.test-resources'
}

dependencies {
    annotationProcessor mn.micronaut.inject.java
    annotationProcessor mn.micronaut.graal
    annotationProcessor libs.micronaut.docs

    api projects.micronautDataRuntime
    api projects.micronautDataTxJdbc
    api projects.micronautDataConnectionJdbc

    implementation mn.micronaut.json.core
    compileOnly mnSerde.micronaut.serde.oracle.jdbc.json
    implementation mnSql.micronaut.jdbc

    compileOnly mnRxjava2.micronaut.rxjava2
    compileOnly projects.micronautDataHibernateJpa
    compileOnly mnSql.ojdbc11

    testAnnotationProcessor mn.micronaut.inject.java
    testAnnotationProcessor projects.micronautDataProcessor
    testAnnotationProcessor mnValidation.micronaut.validation.processor

    testImplementation projects.micronautDataTck
    testImplementation projects.micronautDataProcessor
    testImplementation mnRxjava2.micronaut.rxjava2
    testImplementation mnReactor.micronaut.reactor
    testImplementation libs.jackson.databind
    testImplementation(libs.managed.javax.persistence.api)
    testImplementation(libs.managed.jakarta.persistence.api)
    testImplementation libs.groovy.sql
    testImplementation mnValidation.micronaut.validation
    testImplementation mnValidation.micronaut.validation.processor

    implementation(mnTestResources.testcontainers.mysql)
    testImplementation(mnTestResources.testcontainers.mariadb)
    implementation(mnTestResources.testcontainers.postgres)
    implementation(mnTestResources.testcontainers.mssql)
    implementation(mnTestResources.testcontainers.oracle.xe)

    testCompileOnly mn.micronaut.inject.groovy

    testImplementation mnMultitenancy.micronaut.multitenancy

    testImplementation mn.micronaut.http.netty
    testRuntimeOnly mnSql.micronaut.jdbc.tomcat
    testRuntimeOnly mnSql.h2
    testRuntimeOnly mnSql.mariadb.java.client
    testRuntimeOnly mnSql.ojdbc11
    testRuntimeOnly mnSql.mysql.connector.java
    testRuntimeOnly mnSql.postgresql
    testRuntimeOnly mnSql.mssql.jdbc
    testRuntimeOnly mn.snakeyaml

    testResourcesService mnSql.mariadb.java.client
    testResourcesService mnSql.ojdbc11
    testResourcesService mnSql.mysql.connector.java
    testResourcesService mnSql.postgresql
    testResourcesService mnSql.mssql.jdbc

    testImplementation mnSerde.micronaut.serde.support
    testImplementation mnTestResources.micronaut.test.resources.extensions.junit.platform

    testRuntimeOnly mnSerde.micronaut.serde.oracle.jdbc.json
    testRuntimeOnly mnFlyway.micronaut.flyway
    testRuntimeOnly mnFlyway.flyway.oracle
}

micronaut {
    version libs.versions.micronaut.platform.get()
    testResources {
        enabled = true
        inferClasspath = false
        additionalModules.add(KnownModules.JDBC_POSTGRESQL)
        additionalModules.add(KnownModules.JDBC_MYSQL)
        additionalModules.add(KnownModules.JDBC_MARIADB)
        additionalModules.add(KnownModules.JDBC_ORACLE_XE)
        additionalModules.add(KnownModules.JDBC_MSSQL)
        clientTimeout = 300
        version = libs.versions.micronaut.testresources.get()
    }
}

tasks.withType(Test).configureEach {
    jvmArgs '-Xmx1024m'
    systemProperty "oracle.jdbc.timezoneAsRegion", "false"
}

micronautBuild {
    resolutionStrategy {
        componentSelection {
            all { selection ->
                if (selection.candidate.module == 'mssql-jdbc' && !selection.candidate.version.contains("jre8")) {
                    selection.reject("Not a JDK8 compatible MS SQL driver")
                }
            }
        }
    }
}
