import io.micronaut.testresources.buildtools.KnownModules

plugins {
    id "io.micronaut.build.internal.data-module"
    id 'io.micronaut.test-resources'
}

dependencies {
    annotationProcessor mn.micronaut.inject.java
    annotationProcessor mn.micronaut.graal
    annotationProcessor libs.micronaut.docs

    api mn.micronaut.runtime
    api mnReactor.micronaut.reactor
    api projects.dataModel
    api projects.dataRuntime
    api mnR2dbc.micronaut.r2dbc.core
    api libs.r2dbc.spi

    implementation mn.micronaut.context
    compileOnly mnSerde.micronaut.serde.support
    implementation mnReactor.micronaut.reactor

    testImplementation projects.dataTck
    testImplementation mnTest.micronaut.test.spock
    testImplementation libs.r2dbc.pool
    testImplementation mnRxjava2.micronaut.rxjava2

    testAnnotationProcessor mn.micronaut.inject.java
    testAnnotationProcessor projects.dataProcessor

    testImplementation mn.jackson.databind
    testImplementation libs.javax.persistence.api
    testImplementation libs.jakarta.persistence.api
    testImplementation libs.groovy.sql
    testImplementation mnValidation.micronaut.validation

    testImplementation mn.micronaut.http.server.netty
    testImplementation mn.micronaut.http.client

    testImplementation platform(libs.testcontainers.bom)

    testImplementation libs.testcontainers.r2dbc

    testImplementation libs.drivers.r2dbc.oracle
    testImplementation libs.testcontainers.oracle

    // mariadb
    testImplementation libs.drivers.r2dbc.mariadb
    testImplementation libs.drivers.jdbc.mariadb

    // mysql
    testImplementation libs.drivers.r2dbc.mysql
    testImplementation libs.drivers.jdbc.mysql

    // h2
    testImplementation libs.drivers.r2dbc.h2
    testRuntimeOnly mnSql.h2

    // sqlserver
    testImplementation libs.drivers.r2dbc.mssql
    testImplementation libs.drivers.jdbc.mssql

    // postgres
    testImplementation libs.drivers.r2dbc.postgresql
    testImplementation libs.drivers.jdbc.postgresql

    testImplementation mnMultitenancy.micronaut.multitenancy

    testImplementation mn.micronaut.http.netty

    testCompileOnly mn.micronaut.inject.groovy
    testCompileOnly projects.dataProcessor

    testResourcesService libs.drivers.jdbc.mariadb
    testResourcesService libs.drivers.jdbc.oracle
    testResourcesService libs.drivers.jdbc.mysql
    testResourcesService libs.drivers.jdbc.postgresql
    testResourcesService libs.drivers.jdbc.mssql

    testImplementation libs.micronaut.testresources.client
    testImplementation mnSerde.micronaut.serde.support
}

micronaut {
    version = libs.versions.micronaut.asProvider().get()
    testResources {
        enabled = true
        inferClasspath = false
        additionalModules.add(KnownModules.R2DBC_POSTGRESQL)
        additionalModules.add(KnownModules.R2DBC_MYSQL)
        additionalModules.add(KnownModules.R2DBC_MARIADB)
        additionalModules.add(KnownModules.R2DBC_ORACLE_XE)
        additionalModules.add(KnownModules.R2DBC_MSSQL)
        clientTimeout = 300
        version = libs.versions.micronaut.testresources.get()
    }
}

tasks.named("test") {
    systemProperty "oracle.jdbc.timezoneAsRegion", "false"
    systemProperty "java.net.preferIPv4Stack", "true"
    systemProperty "java.util.concurrent.ForkJoinPool.common.parallelism", "2"
}

micronautBuild {
    resolutionStrategy {
        componentSelection {
            all { selection ->
                if (selection.candidate.module == 'mssql-jdbc' && !selection.candidate.version.contains("jre8")) {
                    selection.reject("Not a JDK8 compatible MS SQL driver")
                }
            }
        }
    }
}

