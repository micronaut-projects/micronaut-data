import io.micronaut.testresources.buildtools.KnownModules

plugins {
    id "io.micronaut.build.internal.data-module"
    id 'io.micronaut.test-resources'
}

dependencies {
    annotationProcessor mn.micronaut.inject.java
    annotationProcessor mn.micronaut.graal
    annotationProcessor libs.micronaut.docs

    api mn.micronaut.runtime
    api libs.micronaut.reactor
    api projects.dataModel
    api projects.dataRuntime
    api libs.micronaut.r2dbc
    api libs.r2dbc.spi

    implementation mn.micronaut.http
    implementation libs.micronaut.reactor

    testImplementation projects.dataTck
    testImplementation mn.micronaut.test.spock
    testImplementation libs.r2dbc.pool
    testImplementation libs.micronaut.rxjava2

    testAnnotationProcessor mn.micronaut.inject.java
    testAnnotationProcessor projects.dataProcessor

    testImplementation mn.jackson.databind
    testImplementation libs.javax.persistence.api
    testImplementation libs.jakarta.persistence.api
    testImplementation libs.groovy.sql
    testImplementation mn.micronaut.validation

    testImplementation mn.micronaut.http.server.netty
    testImplementation mn.micronaut.http.client

    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11)) {
        testImplementation libs.drivers.r2dbc.oracle
    }

    // mariadb
    testImplementation libs.drivers.r2dbc.mariadb
    testImplementation libs.drivers.jdbc.mariadb

    // mysql
    testImplementation libs.drivers.r2dbc.mysql
    testImplementation libs.drivers.jdbc.mysql

    // h2
    testImplementation libs.drivers.r2dbc.h2
    testRuntimeOnly libs.h2

    // sqlserver
    testImplementation libs.drivers.r2dbc.mssql
    testImplementation libs.drivers.jdbc.mssql

    // postgres
    testImplementation libs.drivers.r2dbc.postgresql
    testImplementation libs.drivers.jdbc.postgresql

    testImplementation mn.micronaut.multitenancy
    testImplementation mn.micronaut.http.netty

    testCompileOnly mn.micronaut.inject.groovy
    testCompileOnly projects.dataProcessor

    testResourcesService libs.drivers.jdbc.mariadb
    testResourcesService libs.drivers.jdbc.oracle
    testResourcesService libs.drivers.jdbc.mysql
    testResourcesService libs.drivers.jdbc.postgresql
    testResourcesService libs.drivers.jdbc.mssql

    testImplementation("io.micronaut.testresources:micronaut-test-resources-client")
}

micronaut {
    version = libs.versions.micronaut.asProvider().get()
    testResources {
        enabled = true
        inferClasspath = false
        additionalModules.add(KnownModules.R2DBC_POSTGRESQL)
        additionalModules.add(KnownModules.R2DBC_MYSQL)
        additionalModules.add(KnownModules.R2DBC_MARIADB)
        additionalModules.add(KnownModules.R2DBC_ORACLE_XE)
        additionalModules.add(KnownModules.R2DBC_MSSQL)
        clientTimeout = 300
    }
}

tasks.named("test") {
    systemProperty "oracle.jdbc.timezoneAsRegion", "false"
    systemProperty "java.net.preferIPv4Stack", "true"
    systemProperty "java.util.concurrent.ForkJoinPool.common.parallelism", "2"
}

micronautBuild {
    resolutionStrategy {
        componentSelection {
            all { selection ->
                if (selection.candidate.module == 'mssql-jdbc' && !selection.candidate.version.contains("jre8")) {
                    selection.reject("Not a JDK8 compatible MS SQL driver")
                }
            }
        }
    }
}

