import io.micronaut.testresources.buildtools.KnownModules

plugins {
    id "io.micronaut.build.internal.data-module"
    id 'io.micronaut.test-resources'
}

dependencies {
    annotationProcessor mn.micronaut.inject.java
    annotationProcessor mn.micronaut.graal
    annotationProcessor libs.micronaut.docs

    api mn.micronaut.runtime
    api mnReactor.micronaut.reactor
    api projects.micronautDataModel
    api projects.micronautDataRuntime
    api mnR2dbc.micronaut.r2dbc.core
    api mnR2dbc.r2dbc.spi

    implementation mn.micronaut.context
    implementation mn.micronaut.json.core
    compileOnly mnSerde.micronaut.serde.oracle.jdbc.json
    implementation mnReactor.micronaut.reactor

    compileOnly mnR2dbc.r2dbc.oracle

    testImplementation projects.micronautDataTck
    testImplementation mnTest.micronaut.test.spock
    testImplementation mnR2dbc.r2dbc.pool
    testImplementation mnRxjava2.micronaut.rxjava2

    testAnnotationProcessor mn.micronaut.inject.java
    testAnnotationProcessor mnValidation.micronaut.validation.processor
    testAnnotationProcessor projects.micronautDataProcessor

    testImplementation mn.jackson.databind
    testImplementation(libs.managed.javax.persistence.api)
    testImplementation(libs.managed.jakarta.persistence.api)
    testImplementation libs.groovy.sql
    testImplementation mnValidation.micronaut.validation
    testImplementation mnValidation.micronaut.validation.processor

    testImplementation mn.micronaut.http.server.netty
    testImplementation mn.micronaut.http.client

    testImplementation(mnTestResources.testcontainers.r2dbc)

    // oracle
    testImplementation mnR2dbc.r2dbc.oracle

    // mariadb
    testImplementation mnR2dbc.r2dbc.mariadb
    testImplementation mnSql.mariadb.java.client

    // mysql
    testImplementation "io.asyncer:r2dbc-mysql:1.0.4"
    testImplementation mnSql.mysql.connector.java

    // h2
    testImplementation mnR2dbc.r2dbc.h2
    testRuntimeOnly mnSql.h2

    // sqlserver
    testImplementation mnR2dbc.r2dbc.mssql
    testImplementation mnSql.mssql.jdbc

    // postgres
    testImplementation mnR2dbc.r2dbc.postgresql
    testImplementation mnSql.postgresql

    testImplementation mnMultitenancy.micronaut.multitenancy

    testImplementation mn.micronaut.http.netty

    testCompileOnly mn.micronaut.inject.groovy
    testCompileOnly projects.micronautDataProcessor

    testResourcesService mnSql.mariadb.java.client
    testResourcesService mnSql.ojdbc11
    testResourcesService mnSql.mysql.connector.java
    testResourcesService mnSql.postgresql
    testResourcesService mnSql.mssql.jdbc

    testImplementation mnTestResources.micronaut.test.resources.extensions.junit.platform
    testImplementation mnSerde.micronaut.serde.support
    testRuntimeOnly mn.snakeyaml
    testRuntimeOnly mnSerde.micronaut.serde.oracle.jdbc.json

    testRuntimeOnly mnFlyway.micronaut.flyway
    testRuntimeOnly mnFlyway.flyway.oracle
    testRuntimeOnly mnSql.micronaut.jdbc.hikari
}

micronaut {
    version libs.versions.micronaut.platform.get()
    testResources {
        enabled = true
        inferClasspath = false
        additionalModules.add(KnownModules.R2DBC_POSTGRESQL)
        additionalModules.add(KnownModules.R2DBC_MYSQL)
        additionalModules.add(KnownModules.R2DBC_MARIADB)
        additionalModules.add(KnownModules.R2DBC_ORACLE_XE)
        additionalModules.add(KnownModules.R2DBC_MSSQL)
        clientTimeout = 300
        version = libs.versions.micronaut.testresources.get()
    }
}

tasks.withType(Test).configureEach {
    jvmArgs '-Xmx3072m'
    systemProperty "oracle.jdbc.timezoneAsRegion", "false"
    systemProperty "java.net.preferIPv4Stack", "true"
    systemProperty "java.util.concurrent.ForkJoinPool.common.parallelism", "2"
}

micronautBuild {
    resolutionStrategy {
        componentSelection {
            all { selection ->
                if (selection.candidate.module == 'mssql-jdbc' && !selection.candidate.version.contains("jre8")) {
                    selection.reject("Not a JDK8 compatible MS SQL driver")
                }
            }
        }
    }
}
