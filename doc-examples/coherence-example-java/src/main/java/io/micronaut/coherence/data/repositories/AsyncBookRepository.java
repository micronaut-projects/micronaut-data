/*
 * Copyright 2017-2024 original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.micronaut.coherence.data.repositories;

import com.tangosol.util.UUID;
import io.micronaut.coherence.data.annotation.CoherenceRepository;
import io.micronaut.coherence.data.model.Author;
import io.micronaut.coherence.data.model.Book;
import io.micronaut.data.annotation.Id;
import io.micronaut.data.repository.async.AsyncCrudRepository;

import java.util.Collection;
import java.util.List;
import java.util.concurrent.CompletableFuture;

/**
 * A {@link Book} {@code Repository} to test queries generated by Micronaut.
 */
@CoherenceRepository("book")
public interface AsyncBookRepository extends AsyncCrudRepository<Book, UUID> {

    CompletableFuture<Boolean> existsByAuthor(Author author);

    CompletableFuture<List<Book>> findByAuthor(Author author);

    CompletableFuture<List<Book>> findByPagesGreaterThanEquals(int pages);

    CompletableFuture<List<Book>> findByPagesLessThanEquals(int pageCount);

    CompletableFuture<List<Book>> findByTitleLike(String like);

    CompletableFuture<List<Book>> findByPagesGreaterThan(int pageCount);

    CompletableFuture<List<Book>> findByPagesLessThan(int pageCount);

    CompletableFuture<List<Book>> findByPublicationYearAfter(int year);

    CompletableFuture<List<Book>> findByPublicationYearBefore(int year);

    CompletableFuture<List<Book>> findByTitleContains(String keyword);

    CompletableFuture<List<Book>> findByTitleStartingWith(String keyword);

    CompletableFuture<List<Book>> findByTitleEndingWith(String keyword);

    CompletableFuture<List<Book>> findByTitleIn(Collection<String> titles);

    CompletableFuture<List<Book>> findByPublicationYearBetween(int startYear, int endYear);

    CompletableFuture<List<Book>> findByAuthorIsNull();

    CompletableFuture<List<Book>> findByAuthorIsNotNull();

    // projections
    CompletableFuture<Long> countTitleByPagesGreaterThan(int pageCount);

    CompletableFuture<Long> countDistinctTitleByPagesGreaterThan(int pageCount);

    CompletableFuture<List<String>> findDistinctTitleByPagesGreaterThan(int pageCount);

    CompletableFuture<Long> findMaxPagesByAuthor(Author author);

    CompletableFuture<Long> findMinPagesByAuthor(Author author);

    CompletableFuture<Long> findSumPagesByAuthor(Author author);

    CompletableFuture<Long> findAvgPagesByAuthor(Author author);

    // updates
    CompletableFuture<Integer> update(@Id UUID id, int pages);

    CompletableFuture<Void> updateByTitleStartingWith(String title, int pages);

    // deletes
    CompletableFuture<Integer> deleteByTitleStartingWith(String title);

    CompletableFuture<Collection<Book>> saveBooks(Collection<Book> books);
}
